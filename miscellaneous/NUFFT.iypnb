{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "worth-bench",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from math import log10, ceil, floor\n",
    "from functools import partial\n",
    "from itertools import product\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "pressed-stopping",
   "metadata": {},
   "source": [
    "## 1. Spreading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "conceptual-consequence",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_w(epsilon):\n",
    "    return ceil(log10(1/epsilon)) + 1\n",
    "    \n",
    "def compute_beta(epsilon):\n",
    "    return 2.3 * compute_w(epsilon)\n",
    "\n",
    "def fine_grid_size(nonuniform_grid_size, w, upsampling_factor=2):\n",
    "    # TODO fix\n",
    "    sz = np.ceil(np.maximum(upsampling_factor * nonuniform_grid_size, 2*w*np.ones_like(nonuniform_grid_size)))\n",
    "    return sz.astype(int)\n",
    "\n",
    "def fine_grid_spacing(n):\n",
    "    return 2*np.pi / n\n",
    "\n",
    "def kernel(z, beta):\n",
    "    return np.exp(beta * (np.sqrt(1 - z*z) - 1)) if abs(z) <= 1 else 0\n",
    "\n",
    "def compute_alpha(w, n):\n",
    "    return w * np.pi / n\n",
    "\n",
    "# grid of elements of Z (signed integers) such that the kernel function is not zero\n",
    "# on xi - 2 pi mi, i = 0,...,d where d is the number of dimensions\n",
    "def m_grid(point, alpha):\n",
    "    xi = point[0]\n",
    "    alpha_i = alpha[0]\n",
    "    return tuple(\n",
    "        tuple(range(ceil((xi - alpha_i)/(2*np.pi)), floor((xi + alpha_i)/(2*np.pi)) + 1)) \n",
    "            for xi, alpha_i in zip(point, alpha)\n",
    "    ) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "painful-journalism",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w = 11, beta = 25.299999999999997\n",
      "N (non-uniform grid) = [11 16], n (uniform grid) = [22 32]\n",
      "h (fine grid spacing) = [0.28559933 0.19634954]\n",
      "alpha = [1.57079633 1.07992247]\n"
     ]
    }
   ],
   "source": [
    "# all the points in R^d where we evaluate the function\n",
    "pts = np.reshape(np.meshgrid([0.1 * i for i in range(11)], [0.1 * (i*i) for i in range(16)]),(2,-1)).T\n",
    "N = np.array([len(np.unique(pts[:,i])) for i in range(pts.shape[1])])\n",
    "\n",
    "epsilon = 1.e-10\n",
    "\n",
    "w = compute_w(epsilon)\n",
    "beta = compute_beta(epsilon)\n",
    "n = fine_grid_size(N, w)\n",
    "h = fine_grid_spacing(n)\n",
    "krn = partial(kernel, beta=beta)\n",
    "alpha = compute_alpha(w,n)\n",
    "\n",
    "print('w = {}, beta = {}'.format(w, beta))\n",
    "print('N (non-uniform grid) = {}, n (uniform grid) = {}'.format(N, n))\n",
    "print('h (fine grid spacing) = {}'.format(h))\n",
    "print('alpha = {}'.format(alpha))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "passive-marine",
   "metadata": {},
   "outputs": [],
   "source": [
    "def psi(x, alpha, kernel):\n",
    "    krn = np.frompyfunc(kernel, 1, 1)\n",
    "    return np.prod(krn(np.divide(x, alpha)))\n",
    "\n",
    "# takes a point xi in input and the set of integers that make the\n",
    "# |(xi - 2 pi m_i) / alpha_i| <= 1\n",
    "# prt_psi accepts only a vector of coords\n",
    "def psi_per(xi, prt_psi, alpha, verbose=False):\n",
    "    # apply psi to a given combination of m1,..,md\n",
    "    compute_psi = lambda ms: prt_psi(*(xi - 2*np.pi*ms))\n",
    "    \n",
    "    mi = m_grid(xi, alpha)\n",
    "    # assert all(ms for ms in mi)\n",
    "    if not all(mi):\n",
    "        if verbose:\n",
    "            print('[WARNING] no m found for x={}'.format(xi))\n",
    "        return 0\n",
    "    \n",
    "    return sum(map(compute_psi, map(np.array, product(mi))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "statewide-illinois",
   "metadata": {},
   "outputs": [],
   "source": [
    "# l is a vector of fine grid indexes\n",
    "# f is the vector of values of the function\n",
    "#    in all the points (i.e. rows) of the matrix x\n",
    "# x is a matrix whose rows are coordinates in which the function\n",
    "#    is evaluated\n",
    "# h is the spacing in the uniform grid\n",
    "def compute_b(l, f, points, h, prt_psi_per):    \n",
    "    sm = 0\n",
    "    lh = np.multiply(l, h)\n",
    "    \n",
    "    assert len(f) == len(points)\n",
    "    for fi, xi in zip(f,points):\n",
    "        sm += fi * prt_psi_per(lh - xi)\n",
    "    return sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "precise-retreat",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.6426708313214515"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "prt_psi = partial(psi, alpha=alpha, kernel=partial(kernel, beta=beta))\n",
    "\n",
    "f = np.array(list(map(lambda v: np.sin(v[0]*np.pi/12) * np.cos(v[1]*np.pi/3), pts)))\n",
    "f_grid = f.reshape(N, order='F')\n",
    "plt.pcolormesh(f_grid)\n",
    "\n",
    "l = np.array([1,1])\n",
    "prt_psi_per = partial(psi_per, prt_psi=prt_psi, alpha=alpha)\n",
    "\n",
    "compute_b(l, f=f, points=pts, h=h, prt_psi_per=prt_psi_per)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "configured-chicken",
   "metadata": {},
   "source": [
    "## 2. FFT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cooperative-offering",
   "metadata": {},
   "outputs": [],
   "source": [
    "prt_compute_b = partial(compute_b, f=f, points=pts, h=h, prt_psi_per=prt_psi_per)\n",
    "b = np.zeros(n, dtype=float)\n",
    "\n",
    "# TODO improve performance\n",
    "for cmb in map(tuple, product(*(range(ni) for ni in n))):\n",
    "    b[cmb] = prt_compute_b(cmb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "incoming-vermont",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pcolormesh(b)\n",
    "plt.colorbar();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "published-costume",
   "metadata": {},
   "outputs": [],
   "source": [
    "fftb = np.fft.fftn(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "general-threshold",
   "metadata": {},
   "source": [
    "## 3. Deconvolution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "romance-proposition",
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO\n",
    "def kernel_fourier_transform(w):\n",
    "    return 1\n",
    "\n",
    "# translation is a vector containing the original shape of the FFT\n",
    "# which is used to translate back the indexes\n",
    "def correction_factor(frq_indexes, translation, w, kernel, alpha):\n",
    "    vec_krn = np.vectorize(kernel_fourier_transform)\n",
    "    frq_indexes -= translation / 2\n",
    "    return (2/w)*(2/w) / (np.prod(vec_krn(np.multiply(alpha, frq_indexes))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "occasional-teens",
   "metadata": {},
   "outputs": [],
   "source": [
    "prt_correction_factor = partial(correction_factor, translation=np.array(fftb.shape), w=w, \n",
    "                                kernel=partial(kernel, beta=beta), alpha=alpha)\n",
    "\n",
    "N_frq = np.array([10,6])\n",
    "p = np.zeros(N_frq, dtype=float)\n",
    "\n",
    "for cmb in product(*(range(ni) for ni in N_frq)):\n",
    "    p[cmb] = prt_correction_factor(cmb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fewer-richards",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# assume this is all always even\n",
    "def extract_center(shape, n):\n",
    "    return tuple(slice(shape[i]//2 - n[i]//2, shape[i]//2 + n[i]//2) for i in range(len(n)))\n",
    "\n",
    "cropped_fftb = fftb[extract_center(fftb.shape, N_frq)]\n",
    "#ftilde = np.multiply(p, cropped_fftb)\n",
    "ftilde = cropped_fftb\n",
    "\n",
    "plt.figure(figsize=(20,5))\n",
    "plt.subplot(1,2,1)\n",
    "plt.pcolormesh(ftilde.real)\n",
    "plt.colorbar()\n",
    "plt.title('Real')\n",
    "plt.subplot(1,2,2)\n",
    "plt.pcolormesh(ftilde.imag)\n",
    "plt.colorbar()\n",
    "plt.title('Imag')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
